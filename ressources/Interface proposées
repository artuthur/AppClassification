/**
* Decrit une <i>colonne</i> d'un DataSet.
*
* Une colonne a un nom, son DataSet parent et un normaliseur optionnel.
*
* Un normaliseur traduit toutes les valeurs possibles de la colonne
* (dans son DataSet) en une valeur entre 0 et 1.
* Seule les colonnes <i>normalisables</i> (qui ont un normaliseur) peuvent
* etre utilisees comme axe dans le nuage de points.
*/

public interface IColumn {
    /**
    * stocke le <i>normaliseur</i> en parametre dans la colonne.
    */
    public void setNormalizer(IValueNormalizer valueNormalizer);
    /**
    * Recupere la valeur de cette colonne dans la donnee en parametre,
    * puis normalise cette valeur )entre 0 et 1) et la retourne normalisee.
    * Si la colonne n'est pas normalisable, le comportement n'est pas
    * definit.
    */
    public double getNormalizedValue(IPoint point);
    /**
    * "Denormalise" une valeur entre 0 et 1 en une "vraie" valeur pour
    * cette colonne.    
    * Si la colonne n'est pas normalisable, le comportement n'est pas
    * definit.
    */
    public Object getDenormalizedValue(double value);
    /**
    * Retourne le nom de la colonne.
    */
    public String getName();
    /**
    * Retourne le DataSet auquel cette colonne appartient.
    */
    public IDataset getDataset();
    /**
    * Indique si cette colonne est normalisable (a un <i>normaliseur</i>).
    */
    public boolean isNormalizable();
}

/**
* Decrit un <i>DatSet</i>, c'est a dire un ensemble de points (ou lignes,
* ou donnees) ayant tous la meme structure (les memes colonnes)
*
* Un DataSet est <i>Iterable</i> pour pouvoir parcourir l'ensemble des
* donnees(ou lignes ou points) .
* Pour cette raison, il n'y a pas de getter pour l'ensemble des points
* d'un DataSet.
*/
public interface IDataset extends Iterable<IPoint> {
    /**
    * Le nom du DataSet ex: Titanic, Iris, Pokemon, ...
    */
    public String getTitle();
    /**
    * Nombre de lignes (ou donnees ou points) dans le DataSet
    */
    public int getNbLines();
    /**
    * stocke dans le DataSet la collection de donnees passee en parametre
    */
    public void setLines(List<IPoint> lines);
    /**
    * Ajoute une donnee dans le DataSet
    */
    void addLine(IPoint element);
    /**
    * Ajoute une collection de donnees dans le DataSet
    */
    void addAllLine(List<IPoint> element);
}

/**
* Decrit un Point (ou donnee, ou ligne) dans un DataSet.
*/
public interface IPoint {
    /**
    * Retourne la valeur de ce point pour la colonne en parametre.
    *
    * Note, on aurait pu utiliser une interface generique (parametree avec
    * un type), mais cela complique significativement d'autres parties
    * du code.
    */
    public Object getValue(IColumn col);
    /**
    * Retourne la valeur de ce point normalisee pour la colonne en parametre.
    *
    * La normalisation se fait avec le <i>normaliseur</i> de la colonne.
    * Si la colonne n'est pas normalisable, le comportement n'est pas defini.
    */
    public double getNormalizedValue(IColumn xcol);
}
